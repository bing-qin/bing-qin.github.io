{"version":3,"sources":["components/Toggle.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","props","state","isToggleOn","handleClick","bind","this","setState","type","onClick","React","Component","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","Title","Paragraph","Text","Header","Content","Footer","App","console","log","className","theme","mode","defaultSelectedKeys","style","lineHeight","textAlign","Item","key","padding","background","minHeight","strong","gutter","span","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2ZA0BeA,E,YAtBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAACC,YAAY,GAE1B,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAJJ,E,2EAQfC,KAAKC,UAAS,SAAAL,GAAK,MAAK,CACpBC,YAAaD,EAAMC,iB,+BAKvB,OACI,uBAAQK,KAAK,UAAUC,QAASH,KAAKF,aAChCE,KAAKJ,MAAMC,WAAa,KAAO,W,GAjB3BO,IAAMC,WC+BZC,E,YA/BX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAACW,KAAM,IAAIC,MAFT,E,iFAKE,IAAD,OAChBR,KAAKS,QAAUC,aACX,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcZ,KAAKS,W,6BAInBT,KAAKC,SAAS,CACVM,KAAM,IAAIC,S,+BAKd,OACI,6BACI,yEAAYR,KAAKJ,MAAMW,KAAKM,qBAA5B,U,GA1BIT,IAAMC,WCKlBS,G,WAAAA,OAAOC,E,IAAAA,UAAWC,E,IAAAA,KAClBC,E,IAAAA,OAAQC,E,IAAAA,QAASC,E,IAAAA,OAyCVC,MAvCf,WACI,SAAStB,IACLuB,QAAQC,IAAItB,MAElB,OACE,yBAAKuB,UAAU,OACX,uBAAQA,UAAU,UACd,kBAACN,EAAD,KACI,yBAAKM,UAAU,SACf,uBAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAAMC,MAAO,CAAEC,WAAY,OAAOC,UAAU,UACnG,sBAAMC,KAAN,CAAWC,IAAI,IAAI5B,QAASL,GAA5B,gBACA,sBAAMgC,KAAN,CAAWC,IAAI,IAAI5B,QAASL,GAA5B,gBACA,sBAAMgC,KAAN,CAAWC,IAAI,IAAI5B,QAASL,GAA5B,kBAGR,kBAACoB,EAAD,CAASS,MAAO,CAAEK,QAAS,WACvB,yBAAKL,MAAO,CAAEM,WAAY,OAAQD,QAAS,GAAIE,UAAW,IAAIL,UAAU,SACpE,2BACI,kBAACf,EAAD,qBACA,kBAACC,EAAD,4CACU,kBAACC,EAAD,CAAMmB,QAAM,GAAZ,gBADV,qBAEI,kBAAC,EAAD,QAGR,4BACA,uBAAKC,OAAQ,CAAC,GAAI,KACd,uBAAKC,KAAM,GAAI,uBAAQnC,KAAK,WAAb,OACf,uBAAKmC,KAAM,GAAI,kBAAC,EAAD,OACf,uBAAKA,KAAM,GAAI,kBAAC,EAAD,OACf,uBAAKA,KAAM,GAAI,kBAAC,EAAD,UAI3B,kBAAClB,EAAD,CAAQQ,MAAO,CAAEE,UAAW,WAA5B,6CC/BQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.f617e90c.chunk.js","sourcesContent":["import { Button } from 'antd';\nimport React from \"react\";\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {isToggleOn: true};\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }));\n    }\n\n    render() {\n        return (\n            <Button type=\"primary\" onClick={this.handleClick}>\n                {this.state.isToggleOn ? 'ON' : 'OFF'}\n            </Button>\n        );\n    }\n}\n\nexport default Toggle;","import React from \"react\";\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>现在的时间是：{this.state.date.toLocaleTimeString()}.</h3>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\nimport { Row,Col,Button } from 'antd';\nimport { Typography, Divider } from 'antd';\nimport { Layout, Menu } from 'antd';\nimport Toggle from './components/Toggle';\nimport Clock from './components/Clock';\nimport './App.css';\nconst { Title, Paragraph, Text } = Typography;\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n    function handleClick() {\n        console.log(this);\n    }\n  return (\n    <div className=\"App\">\n        <Layout className=\"layout\">\n            <Header>\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} style={{ lineHeight: '64px',textAlign:'right' }} >\n                    <Menu.Item key=\"1\" onClick={handleClick}>首页</Menu.Item>\n                    <Menu.Item key=\"2\" onClick={handleClick}>服务</Menu.Item>\n                    <Menu.Item key=\"3\" onClick={handleClick}>关于</Menu.Item>\n                </Menu>\n            </Header>\n            <Content style={{ padding: '0 20px' }}>\n                <div style={{ background: '#fff', padding: 24, minHeight: 280,textAlign:\"left\" }}>\n                    <Typography>\n                        <Title>欢迎</Title>\n                        <Paragraph>\n                            将技术转化为<Text strong>赚钱</Text>的能力\n                            <Clock/>\n                        </Paragraph>\n                    </Typography>\n                    <Divider />\n                    <Row gutter={[24, 16]}>\n                        <Col span={6} ><Button type=\"primary\">OK</Button></Col>\n                        <Col span={6} ><Toggle/></Col>\n                        <Col span={6} ><Toggle/></Col>\n                        <Col span={6} ><Toggle/></Col>\n                    </Row>\n                </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}