{"version":3,"sources":["components/Clock.js","pages/Home.js","pages/About.js","pages/Service.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","Title","Paragraph","Text","Home","strong","About","Service","Header","Content","Footer","App","handleNavClick","bind","navKey","opt","console","log","key","content","className","theme","mode","defaultSelectedKeys","style","lineHeight","textAlign","Item","onClick","padding","background","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAkCeA,E,YA/BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAACC,KAAM,IAAIC,MAFT,E,iFAKE,IAAD,OAChBC,KAAKC,QAAUC,aACX,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACVP,KAAM,IAAIC,S,+BAKd,OACI,6BACI,yEAAYC,KAAKH,MAAMC,KAAKQ,qBAA5B,U,GA1BIC,IAAMC,WCElBC,E,IAAAA,MAAOC,E,IAAAA,UAAWC,E,IAAAA,KAcXC,E,iLAVP,OAAO,2BACH,kBAACH,EAAD,qBACA,kBAACC,EAAD,4CACU,kBAACC,EAAD,CAAME,QAAM,GAAZ,gBADV,qBAEI,kBAAC,EAAD,Y,GANGN,IAAMC,WCEVM,E,iLAJP,OAAO,mD,GAFKP,IAAMC,WCMXO,E,iLAJP,OAAO,mD,GAFOR,IAAMC,WCKpBQ,G,WAAAA,QAAQC,E,IAAAA,QAASC,E,IAAAA,OA8CVC,E,YA3CX,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KACDwB,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKxB,MAAQ,CAACyB,OAAQ,QAHP,E,4EAMJC,GACXC,QAAQC,IAAIF,EAAIG,KAChB1B,KAAKK,SAAS,CAACiB,OAAQC,EAAIG,Q,+BAI3B,IACIC,EADEL,EAAStB,KAAKH,MAAMyB,OAQ1B,OALIK,EADU,SAAXL,EACS,kBAAC,EAAD,MACO,UAAXA,EACI,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAER,yBAAKM,UAAU,OACX,uBAAQA,UAAU,UACd,kBAACZ,EAAD,KACI,yBAAKY,UAAU,SACf,uBAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAACT,GAASU,MAAO,CAAEC,WAAY,OAAOC,UAAU,UACtG,sBAAMC,KAAN,CAAWT,IAAI,OAAOU,QAASpC,KAAKoB,gBAApC,gBACA,sBAAMe,KAAN,CAAWT,IAAI,UAAUU,QAASpC,KAAKoB,gBAAvC,gBACA,sBAAMe,KAAN,CAAWT,IAAI,QAAQU,QAASpC,KAAKoB,gBAArC,kBAGR,kBAACH,EAAD,CAASe,MAAO,CAAEK,QAAS,WACvB,yBAAKL,MAAO,CAAEM,WAAY,OAAQD,QAAS,GAAIE,UAAW,IAAIL,UAAU,SACnEP,IAGT,kBAACT,EAAD,CAAQc,MAAO,CAAEE,UAAW,WAA5B,gD,GArCF3B,IAAMC,WCGJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.c68bf3d0.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>现在的时间是：{this.state.date.toLocaleTimeString()}.</h3>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\nimport Clock from \"../components/Clock\";\nimport {Typography} from \"antd\";\n\nconst { Title, Paragraph, Text } = Typography;\n\nclass Home extends React.Component {\n    render() {\n        return <Typography>\n            <Title>欢迎</Title>\n            <Paragraph>\n                将技术转化为<Text strong>赚钱</Text>的能力\n                <Clock/>\n            </Paragraph>\n        </Typography>;\n    }\n}\n\nexport default Home;","import React from 'react';\n\nclass About extends React.Component {\n    render() {\n        return <h1>关于123</h1>;\n    }\n}\n\nexport default About;","import React from 'react';\n\nclass Service extends React.Component {\n    render() {\n        return <h1>服务123</h1>;\n    }\n}\n\nexport default Service;","import React from 'react';\nimport {Layout, Menu} from 'antd';\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Service from \"./pages/Service\";\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNavClick = this.handleNavClick.bind(this);\n        this.state = {navKey: \"Home\"};\n    }\n\n    handleNavClick(opt){\n        console.log(opt.key);\n        this.setState({navKey: opt.key});\n    }\n\n    render() {\n        const navKey = this.state.navKey;\n        let content;\n        if(navKey === 'Home')\n            content=<Home />;\n        else if(navKey === 'About')\n            content=<About/>;\n        else\n            content=<Service/>;\n        return (\n            <div className=\"App\">\n                <Layout className=\"layout\">\n                    <Header>\n                        <div className=\"logo\" />\n                        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[navKey]} style={{ lineHeight: '64px',textAlign:'right' }} >\n                            <Menu.Item key=\"Home\" onClick={this.handleNavClick}>首页</Menu.Item>\n                            <Menu.Item key=\"Service\" onClick={this.handleNavClick}>服务</Menu.Item>\n                            <Menu.Item key=\"About\" onClick={this.handleNavClick}>关于</Menu.Item>\n                        </Menu>\n                    </Header>\n                    <Content style={{ padding: '0 20px' }}>\n                        <div style={{ background: '#fff', padding: 24, minHeight: 280,textAlign:\"left\" }}>\n                            {content}\n                        </div>\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n                </Layout>\n            </div>\n        )\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}